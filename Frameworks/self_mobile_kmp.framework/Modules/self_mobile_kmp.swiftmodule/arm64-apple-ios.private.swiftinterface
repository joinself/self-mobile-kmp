// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -Onone -module-name self_mobile_kmp
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import self_mobile_kmp
extension self_mobile_kmp.Skie.KotlinxDatetime {
  public enum Instant {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_datetimeInstant
  }
}
extension self_mobile_kmp.Skie.KotlinxDatetime.Instant {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_datetimeInstant.Companion
  }
}
extension self_mobile_kmp.Skie.Okio {
  public enum ByteString {
    public typealias __Kotlin = self_mobile_kmp.OkioByteString
  }
  public enum BufferedSink {
    public typealias __Kotlin = self_mobile_kmp.OkioBufferedSink
    @frozen public enum __Sealed : Swift.Hashable {
      case buffer(self_mobile_kmp.Skie.Okio.Buffer.__Kotlin)
      case `else`
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.Okio.BufferedSink.__Sealed, b: self_mobile_kmp.Skie.Okio.BufferedSink.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum Sink {
    public typealias __Kotlin = self_mobile_kmp.OkioSink
  }
  public enum Closeable {
    public typealias __Kotlin = self_mobile_kmp.OkioCloseable
  }
  public enum BufferedSource {
    public typealias __Kotlin = self_mobile_kmp.OkioBufferedSource
    @frozen public enum __Sealed : Swift.Hashable {
      case buffer(self_mobile_kmp.Skie.Okio.Buffer.__Kotlin)
      case `else`
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.Okio.BufferedSource.__Sealed, b: self_mobile_kmp.Skie.Okio.BufferedSource.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum Source {
    public typealias __Kotlin = self_mobile_kmp.OkioSource
  }
  public enum Buffer {
    public typealias __Kotlin = self_mobile_kmp.OkioBuffer
  }
  public enum IOException {
    public typealias __Kotlin = self_mobile_kmp.OkioIOException
  }
  public enum Timeout {
    public typealias __Kotlin = self_mobile_kmp.OkioTimeout
  }
}
extension self_mobile_kmp.Skie.Okio.ByteString {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.OkioByteString.Companion
  }
}
extension self_mobile_kmp.Skie.Okio.Buffer {
  public enum UnsafeCursor {
    public typealias __Kotlin = self_mobile_kmp.OkioBuffer.UnsafeCursor
  }
}
extension self_mobile_kmp.Skie.Okio.Timeout {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.OkioTimeout.Companion
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.Okio.BufferedSource.__Sealed where __Sealed : self_mobile_kmp.OkioBufferedSource
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.Okio.BufferedSink.__Sealed where __Sealed : self_mobile_kmp.OkioBufferedSink
extension self_mobile_kmp.Skie.MultiplatformCryptoLibsodiumBindings {
  public enum SignatureKeyPair {
    public typealias __Kotlin = self_mobile_kmp.Multiplatform_crypto_libsodium_bindingsSignatureKeyPair
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed where __Sealed : self_mobile_kmp.Skie_SuspendResult
extension self_mobile_kmp.Skie.RuntimeKotlin {
  public enum SkieColdFlowIterator {
    public typealias __Kotlin = self_mobile_kmp.SkieColdFlowIterator
    public class __Suspend<E> where E : AnyObject {
      final public let __kotlinObject: self_mobile_kmp.SkieColdFlowIterator<E>
      public init(_ __kotlinObject: self_mobile_kmp.SkieColdFlowIterator<E>)
      @objc deinit
    }
  }
  public enum SkieKotlinFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinFlow
  }
  public enum SkieKotlinMutableSharedFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinMutableSharedFlow
  }
  public enum SkieKotlinMutableStateFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinMutableStateFlow
  }
  public enum SkieKotlinOptionalFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinOptionalFlow
  }
  public enum SkieKotlinOptionalMutableSharedFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow
  }
  public enum SkieKotlinOptionalMutableStateFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinOptionalMutableStateFlow
  }
  public enum SkieKotlinOptionalSharedFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinOptionalSharedFlow
  }
  public enum SkieKotlinOptionalStateFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinOptionalStateFlow
  }
  public enum SkieKotlinSharedFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinSharedFlow
  }
  public enum SkieKotlinStateFlow {
    public typealias __Kotlin = self_mobile_kmp.SkieKotlinStateFlow
  }
  public enum Skie_CancellationHandler {
    public typealias __Kotlin = self_mobile_kmp.Skie_CancellationHandler
  }
  public enum Skie_DispatcherDelegate {
    public typealias __Kotlin = self_mobile_kmp.Skie_DispatcherDelegate
  }
  public enum Skie_SuspendHandler {
    public typealias __Kotlin = self_mobile_kmp.Skie_SuspendHandler
  }
  public enum Skie_SuspendResult {
    public typealias __Kotlin = self_mobile_kmp.Skie_SuspendResult
    @frozen public enum __Sealed : Swift.Hashable {
      case canceled(self_mobile_kmp.Skie.RuntimeKotlin.Skie_SuspendResult.Canceled.__Kotlin)
      case error(self_mobile_kmp.Skie.RuntimeKotlin.Skie_SuspendResult.Error.__Kotlin)
      case success(self_mobile_kmp.Skie.RuntimeKotlin.Skie_SuspendResult.Success.__Kotlin)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed, b: self_mobile_kmp.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
}
extension self_mobile_kmp.Skie.RuntimeKotlin.Skie_SuspendResult {
  public enum Canceled {
    public typealias __Kotlin = self_mobile_kmp.Skie_SuspendResult.Canceled
  }
  public enum Error {
    public typealias __Kotlin = self_mobile_kmp.Skie_SuspendResult.Error
  }
  public enum Success {
    public typealias __Kotlin = self_mobile_kmp.Skie_SuspendResult.Success
  }
}
public func skie<E>(_ kotlinObject: self_mobile_kmp.SkieColdFlowIterator<E>) -> self_mobile_kmp.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend<E> where E : AnyObject
extension self_mobile_kmp.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> self_mobile_kmp.KotlinBoolean
  #endif
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed where __Sealed : self_mobile_kmp.Kotlinx_serialization_jsonJsonPrimitive
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.KotlinxSerializationJson.JsonElement.__Sealed where __Sealed : self_mobile_kmp.Kotlinx_serialization_jsonJsonElement
extension self_mobile_kmp.Skie.KotlinxSerializationJson {
  public enum JsonElement {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_jsonJsonElement
    @frozen public enum __Sealed : Swift.Hashable {
      case jsonPrimitive(self_mobile_kmp.Skie.KotlinxSerializationJson.JsonPrimitive.__Kotlin)
      case `else`
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.KotlinxSerializationJson.JsonElement.__Sealed, b: self_mobile_kmp.Skie.KotlinxSerializationJson.JsonElement.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum JsonPrimitive {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_jsonJsonPrimitive
    @frozen public enum __Sealed : Swift.Hashable {
      case jsonNull(self_mobile_kmp.Skie.KotlinxSerializationJson.JsonNull.__Kotlin)
      case `else`
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed, b: self_mobile_kmp.Skie.KotlinxSerializationJson.JsonPrimitive.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum JsonNull {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_jsonJsonNull
  }
}
extension self_mobile_kmp.Skie.KotlinxSerializationJson.JsonElement {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_jsonJsonElement.Companion
  }
}
extension self_mobile_kmp.Skie.KotlinxSerializationJson.JsonPrimitive {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_jsonJsonPrimitive.Companion
  }
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public var subscriptionCount: self_mobile_kmp.SkieSwiftStateFlow<self_mobile_kmp.KotlinInt> {
    get
  }
  final public func resetReplayCache()
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftOptionalFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftOptionalFlow<T>
  @objc deinit
}
#endif
public enum Skie {
  public enum RuntimeKotlin {
  }
  public typealias co_touchlab_skie__runtime_kotlin = self_mobile_kmp.Skie.RuntimeKotlin
  public enum KotlinxCoroutinesCore {
  }
  public typealias org_jetbrains_kotlinx__kotlinx_coroutines_core = self_mobile_kmp.Skie.KotlinxCoroutinesCore
  public enum com_joinself__self_mobile_kmp {
    public enum ExtensionsKt {
      public typealias __Kotlin = self_mobile_kmp.ExtensionsKt
    }
    public enum IosExtensionsKt {
      public typealias __Kotlin = self_mobile_kmp.IosExtensionsKt
    }
  }
  public enum Stdlib {
  }
  public typealias stdlib = self_mobile_kmp.Skie.Stdlib
  public enum WireRuntime {
  }
  public typealias com_squareup_wire__wire_runtime = self_mobile_kmp.Skie.WireRuntime
  public enum LibraryBase {
  }
  public typealias io_realm_kotlin__library_base = self_mobile_kmp.Skie.LibraryBase
  public enum KotlinxDatetime {
  }
  public typealias org_jetbrains_kotlinx__kotlinx_datetime = self_mobile_kmp.Skie.KotlinxDatetime
  public enum KotlinxSerializationJson {
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_json = self_mobile_kmp.Skie.KotlinxSerializationJson
  public enum MultiplatformCryptoLibsodiumBindings {
  }
  public typealias com_ionspin_kotlin__multiplatform_crypto_libsodium_bindings = self_mobile_kmp.Skie.MultiplatformCryptoLibsodiumBindings
  public enum Okio {
  }
  public typealias com_squareup_okio__okio = self_mobile_kmp.Skie.Okio
  public enum KotlinxSerializationCore {
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_core = self_mobile_kmp.Skie.KotlinxSerializationCore
  public enum self_mobile_kmp_ {
    public enum __SkieSuspendWrappersKt {
      public typealias __Kotlin = self_mobile_kmp.__SkieSuspendWrappersKt
    }
    public enum __SkieTypeExportsKt {
      public typealias __Kotlin = self_mobile_kmp.__SkieTypeExportsKt
    }
  }
}
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinStateFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  final public var value: T {
    get
  }
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftStateFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftStateFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftStateFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftStateFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>) -> self_mobile_kmp.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>) -> self_mobile_kmp.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinMutableStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>) -> self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension self_mobile_kmp.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  final public var value: T? {
    get
  }
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftOptionalStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalStateFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftOptionalStateFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinSharedFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftSharedFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftSharedFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftSharedFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T?) async throws
  #endif
  final public func tryEmit(value: T?) -> Swift.Bool
  final public var subscriptionCount: self_mobile_kmp.SkieSwiftStateFlow<self_mobile_kmp.KotlinInt> {
    get
  }
  final public var value: T? {
    get
    set
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftOptionalMutableStateFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public var replayCache: [T?] {
    get
  }
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T?>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftOptionalSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public var subscriptionCount: self_mobile_kmp.SkieSwiftStateFlow<self_mobile_kmp.KotlinInt> {
    get
  }
  final public func resetReplayCache()
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftMutableSharedFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftMutableSharedFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftMutableSharedFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : _Concurrency.AsyncSequence, Swift._ObjectiveCBridgeable {
  public typealias AsyncIterator = self_mobile_kmp.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = self_mobile_kmp.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public var replayCache: [T] {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func emit(value: T) async throws
  #endif
  final public func tryEmit(value: T) -> Swift.Bool
  final public var subscriptionCount: self_mobile_kmp.SkieSwiftStateFlow<self_mobile_kmp.KotlinInt> {
    get
  }
  final public var value: T {
    get
    set
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  final public func makeAsyncIterator() -> self_mobile_kmp.SkieSwiftFlowIterator<T>
  final public func _bridgeToObjectiveC() -> self_mobile_kmp.SkieSwiftMutableStateFlow<T>._ObjectiveCType
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftMutableStateFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftMutableStateFlow<T>._ObjectiveCType, result: inout self_mobile_kmp.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.SkieSwiftMutableStateFlow<T>._ObjectiveCType?) -> self_mobile_kmp.SkieSwiftMutableStateFlow<T>
  @objc deinit
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  public typealias Element = T
  @objc deinit
  #if compiler(>=5.3) && $AsyncAwait
  public func next() async -> self_mobile_kmp.SkieSwiftFlowIterator<T>.Element?
  #endif
}
#endif
@frozen public enum Wire_runtimeFieldEncoding : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case varint
  case fixed64
  case lengthDelimited
  case fixed32
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: self_mobile_kmp.__Wire_runtimeFieldEncoding.Companion {
    get
  }
  public func rawProtoAdapter() -> self_mobile_kmp.Wire_runtimeProtoAdapter<Swift.AnyObject>
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__Wire_runtimeFieldEncoding, result: inout self_mobile_kmp.Wire_runtimeFieldEncoding?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Wire_runtimeFieldEncoding, result: inout self_mobile_kmp.Wire_runtimeFieldEncoding?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Wire_runtimeFieldEncoding?) -> self_mobile_kmp.Wire_runtimeFieldEncoding
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__Wire_runtimeFieldEncoding
  public static func fromObjectiveC(_ source: self_mobile_kmp.__Wire_runtimeFieldEncoding?) -> self_mobile_kmp.Wire_runtimeFieldEncoding
  public typealias Companion = self_mobile_kmp.__Wire_runtimeFieldEncoding.Companion
  public typealias _ObjectiveCType = self_mobile_kmp.__Wire_runtimeFieldEncoding
  public static func == (a: self_mobile_kmp.Wire_runtimeFieldEncoding, b: self_mobile_kmp.Wire_runtimeFieldEncoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.Wire_runtimeFieldEncoding]
  public static var allCases: [self_mobile_kmp.Wire_runtimeFieldEncoding] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.Wire_runtimeFieldEncoding {
  public func toKotlinEnum() -> self_mobile_kmp.__Wire_runtimeFieldEncoding
}
extension self_mobile_kmp.__Wire_runtimeFieldEncoding {
  public func toSwiftEnum() -> self_mobile_kmp.Wire_runtimeFieldEncoding
}
extension self_mobile_kmp.Skie.WireRuntime {
  public enum WireEnum {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeWireEnum
  }
  public enum Message {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeMessage
  }
  public enum ProtoAdapter {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeProtoAdapter
  }
  public enum Instant {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeInstant
  }
  public enum FieldEncoding {
    public typealias __Kotlin = self_mobile_kmp.__Wire_runtimeFieldEncoding
    public typealias __Enum = self_mobile_kmp.Wire_runtimeFieldEncoding
  }
  public enum Syntax {
    public typealias __Kotlin = self_mobile_kmp.__Wire_runtimeSyntax
    public typealias __Enum = self_mobile_kmp.Wire_runtimeSyntax
  }
  public enum ProtoReader {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeProtoReader
  }
  public enum ProtoWriter {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeProtoWriter
  }
  public enum ReverseProtoWriter {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeReverseProtoWriter
  }
  public enum Duration {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeDuration
  }
}
extension self_mobile_kmp.Skie.WireRuntime.Message {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeMessageBuilder
  }
}
extension self_mobile_kmp.Skie.WireRuntime.ProtoAdapter {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeProtoAdapterCompanion
  }
}
extension self_mobile_kmp.Skie.WireRuntime.FieldEncoding {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.__Wire_runtimeFieldEncoding.Companion
  }
}
extension self_mobile_kmp.Skie.WireRuntime.Syntax {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.__Wire_runtimeSyntax.Companion
  }
}
extension self_mobile_kmp.Skie.WireRuntime.ProtoReader {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeProtoReader.Companion
  }
}
extension self_mobile_kmp.Skie.WireRuntime.ProtoWriter {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Wire_runtimeProtoWriter.Companion
  }
}
@frozen public enum Wire_runtimeSyntax : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case proto2
  case proto3
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: self_mobile_kmp.__Wire_runtimeSyntax.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__Wire_runtimeSyntax, result: inout self_mobile_kmp.Wire_runtimeSyntax?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Wire_runtimeSyntax, result: inout self_mobile_kmp.Wire_runtimeSyntax?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Wire_runtimeSyntax?) -> self_mobile_kmp.Wire_runtimeSyntax
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__Wire_runtimeSyntax
  public static func fromObjectiveC(_ source: self_mobile_kmp.__Wire_runtimeSyntax?) -> self_mobile_kmp.Wire_runtimeSyntax
  public typealias Companion = self_mobile_kmp.__Wire_runtimeSyntax.Companion
  public typealias _ObjectiveCType = self_mobile_kmp.__Wire_runtimeSyntax
  public static func == (a: self_mobile_kmp.Wire_runtimeSyntax, b: self_mobile_kmp.Wire_runtimeSyntax) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.Wire_runtimeSyntax]
  public static var allCases: [self_mobile_kmp.Wire_runtimeSyntax] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.Wire_runtimeSyntax {
  public func toKotlinEnum() -> self_mobile_kmp.__Wire_runtimeSyntax
}
extension self_mobile_kmp.__Wire_runtimeSyntax {
  public func toSwiftEnum() -> self_mobile_kmp.Wire_runtimeSyntax
}
extension self_mobile_kmp.Skie.Stdlib {
  public enum Enum {
    public typealias __Kotlin = self_mobile_kmp.KotlinEnum
  }
  public enum Comparable {
    public typealias __Kotlin = self_mobile_kmp.KotlinComparable
  }
  public enum Exception {
    public typealias __Kotlin = self_mobile_kmp.KotlinException
  }
  public enum Throwable {
    public typealias __Kotlin = self_mobile_kmp.KotlinThrowable
  }
  public enum ByteArray {
    public typealias __Kotlin = self_mobile_kmp.KotlinByteArray
  }
  public enum CancellationException {
    public typealias __Kotlin = self_mobile_kmp.KotlinCancellationException
  }
  public enum IllegalStateException {
    public typealias __Kotlin = self_mobile_kmp.KotlinIllegalStateException
  }
  public enum RuntimeException {
    public typealias __Kotlin = self_mobile_kmp.KotlinRuntimeException
  }
  public enum Array {
    public typealias __Kotlin = self_mobile_kmp.KotlinArray
  }
  public enum Pair {
    public typealias __Kotlin = self_mobile_kmp.KotlinPair
  }
  public enum Nothing {
    public typealias __Kotlin = self_mobile_kmp.KotlinNothing
  }
  public enum ByteIterator {
    public typealias __Kotlin = self_mobile_kmp.KotlinByteIterator
  }
  public enum Iterator {
    public typealias __Kotlin = self_mobile_kmp.KotlinIterator
  }
  public enum KClass {
    public typealias __Kotlin = self_mobile_kmp.KotlinKClass
  }
  public enum KDeclarationContainer {
    public typealias __Kotlin = self_mobile_kmp.KotlinKDeclarationContainer
  }
  public enum KAnnotatedElement {
    public typealias __Kotlin = self_mobile_kmp.KotlinKAnnotatedElement
  }
  public enum KClassifier {
    public typealias __Kotlin = self_mobile_kmp.KotlinKClassifier
  }
  public enum IntArray {
    public typealias __Kotlin = self_mobile_kmp.KotlinIntArray
  }
  public enum DoubleArray {
    public typealias __Kotlin = self_mobile_kmp.KotlinDoubleArray
  }
  public enum Unit {
    public typealias __Kotlin = self_mobile_kmp.KotlinUnit
  }
  public enum LongArray {
    public typealias __Kotlin = self_mobile_kmp.KotlinLongArray
  }
  public enum FloatArray {
    public typealias __Kotlin = self_mobile_kmp.KotlinFloatArray
  }
  public enum IntIterator {
    public typealias __Kotlin = self_mobile_kmp.KotlinIntIterator
  }
  public enum DoubleIterator {
    public typealias __Kotlin = self_mobile_kmp.KotlinDoubleIterator
  }
  public enum LongIterator {
    public typealias __Kotlin = self_mobile_kmp.KotlinLongIterator
  }
  public enum FloatIterator {
    public typealias __Kotlin = self_mobile_kmp.KotlinFloatIterator
  }
  public enum Annotation {
    public typealias __Kotlin = self_mobile_kmp.KotlinAnnotation
  }
}
extension self_mobile_kmp.Skie.Stdlib.Enum {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.KotlinEnumCompanion
  }
}
extension self_mobile_kmp.EncryptionManager {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func decryptIncommingMessage(messageId: Swift.String, senderId: Swift.String, deviceId: Swift.String, message: Swift.String) async throws -> Swift.String?
  #endif
}
extension self_mobile_kmp.EncryptionManager {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func encryptGroupMessage(recipients: [Swift.String], devices: [Swift.String], jwsMessage: Swift.String, forceGetDevices: Swift.Bool, forceNewOutboundSession: Swift.Bool, messageToken: Swift.String?) async throws -> self_mobile_kmp.KotlinPair<Foundation.NSString, Foundation.NSArray>?
  #endif
}
@frozen public enum StatusEnum : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case none
  case unverified
  case verified
  case pending
  case sent
  case rejected
  case accepted
  case received
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__StatusEnum, result: inout self_mobile_kmp.StatusEnum?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__StatusEnum, result: inout self_mobile_kmp.StatusEnum?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__StatusEnum?) -> self_mobile_kmp.StatusEnum
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__StatusEnum
  public static func fromObjectiveC(_ source: self_mobile_kmp.__StatusEnum?) -> self_mobile_kmp.StatusEnum
  public typealias _ObjectiveCType = self_mobile_kmp.__StatusEnum
  public static func == (a: self_mobile_kmp.StatusEnum, b: self_mobile_kmp.StatusEnum) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.StatusEnum]
  public static var allCases: [self_mobile_kmp.StatusEnum] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.StatusEnum {
  public func toKotlinEnum() -> self_mobile_kmp.__StatusEnum
}
extension self_mobile_kmp.__StatusEnum {
  public func toSwiftEnum() -> self_mobile_kmp.StatusEnum
}
@frozen public enum ConversationType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case individual
  case group
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__ConversationType, result: inout self_mobile_kmp.ConversationType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__ConversationType, result: inout self_mobile_kmp.ConversationType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__ConversationType?) -> self_mobile_kmp.ConversationType
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__ConversationType
  public static func fromObjectiveC(_ source: self_mobile_kmp.__ConversationType?) -> self_mobile_kmp.ConversationType
  public typealias _ObjectiveCType = self_mobile_kmp.__ConversationType
  public static func == (a: self_mobile_kmp.ConversationType, b: self_mobile_kmp.ConversationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.ConversationType]
  public static var allCases: [self_mobile_kmp.ConversationType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.ConversationType {
  public func toKotlinEnum() -> self_mobile_kmp.__ConversationType
}
extension self_mobile_kmp.__ConversationType {
  public func toSwiftEnum() -> self_mobile_kmp.ConversationType
}
extension self_mobile_kmp.Account {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func accept(message: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Message.__Kotlin, onAcknowledgement: @escaping (self_mobile_kmp.Skie.Stdlib.Throwable.__Kotlin?) -> Swift.Void) async throws
  #endif
}
extension self_mobile_kmp.Account {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func close() async throws
  #endif
}
extension self_mobile_kmp.Account {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func download(dataLink: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.DataObject.Link.__Kotlin) async throws -> self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.DataObject.__Kotlin
  #endif
}
extension self_mobile_kmp.Account {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func handleSignInRequestForSDK(deviceId: Swift.String, publicKeyBase64: Swift.String) async throws -> self_mobile_kmp.KotlinBoolean
  #endif
}
extension self_mobile_kmp.Account {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func register(selfieAttestation: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Attestation.__Kotlin) async throws -> Swift.String?
  #endif
}
extension self_mobile_kmp.Account {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func register(selfId: Swift.String, selfieBase64: Swift.String) async throws -> Swift.String?
  #endif
}
extension self_mobile_kmp.Account {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func reject(message: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Message.__Kotlin, onAcknowledgement: @escaping (self_mobile_kmp.Skie.Stdlib.Throwable.__Kotlin?) -> Swift.Void) async throws
  #endif
}
extension self_mobile_kmp.Account {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func send(message: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Message.__Kotlin, onAcknowledgement: @escaping (self_mobile_kmp.Skie.Stdlib.Throwable.__Kotlin?) -> Swift.Void) async throws
  #endif
}
extension self_mobile_kmp.Account {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func upload(dataObject: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.DataObject.__Kotlin) async throws -> self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.DataObject.Link.__Kotlin?
  #endif
}
@frozen public enum PlatformName : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case android
  case ios
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__PlatformName, result: inout self_mobile_kmp.PlatformName?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__PlatformName, result: inout self_mobile_kmp.PlatformName?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__PlatformName?) -> self_mobile_kmp.PlatformName
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__PlatformName
  public static func fromObjectiveC(_ source: self_mobile_kmp.__PlatformName?) -> self_mobile_kmp.PlatformName
  public typealias _ObjectiveCType = self_mobile_kmp.__PlatformName
  public static func == (a: self_mobile_kmp.PlatformName, b: self_mobile_kmp.PlatformName) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.PlatformName]
  public static var allCases: [self_mobile_kmp.PlatformName] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.PlatformName {
  public func toKotlinEnum() -> self_mobile_kmp.__PlatformName
}
extension self_mobile_kmp.__PlatformName {
  public func toSwiftEnum() -> self_mobile_kmp.PlatformName
}
@frozen public enum ACLCommand : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case list
  case permit
  case revoke
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: self_mobile_kmp.__ACLCommand.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__ACLCommand, result: inout self_mobile_kmp.ACLCommand?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__ACLCommand, result: inout self_mobile_kmp.ACLCommand?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__ACLCommand?) -> self_mobile_kmp.ACLCommand
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__ACLCommand
  public static func fromObjectiveC(_ source: self_mobile_kmp.__ACLCommand?) -> self_mobile_kmp.ACLCommand
  public typealias Companion = self_mobile_kmp.__ACLCommand.Companion
  public typealias _ObjectiveCType = self_mobile_kmp.__ACLCommand
  public static func == (a: self_mobile_kmp.ACLCommand, b: self_mobile_kmp.ACLCommand) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.ACLCommand]
  public static var allCases: [self_mobile_kmp.ACLCommand] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.ACLCommand {
  public func toKotlinEnum() -> self_mobile_kmp.__ACLCommand
}
extension self_mobile_kmp.__ACLCommand {
  public func toSwiftEnum() -> self_mobile_kmp.ACLCommand
}
@frozen public enum DevMode : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case dev
  case test
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__DevMode, result: inout self_mobile_kmp.DevMode?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__DevMode, result: inout self_mobile_kmp.DevMode?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__DevMode?) -> self_mobile_kmp.DevMode
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__DevMode
  public static func fromObjectiveC(_ source: self_mobile_kmp.__DevMode?) -> self_mobile_kmp.DevMode
  public typealias _ObjectiveCType = self_mobile_kmp.__DevMode
  public static func == (a: self_mobile_kmp.DevMode, b: self_mobile_kmp.DevMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.DevMode]
  public static var allCases: [self_mobile_kmp.DevMode] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.DevMode {
  public func toKotlinEnum() -> self_mobile_kmp.__DevMode
}
extension self_mobile_kmp.__DevMode {
  public func toSwiftEnum() -> self_mobile_kmp.DevMode
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp {
  public enum Constants {
    public typealias __Kotlin = self_mobile_kmp.Constants
  }
  public enum ConversationType {
    public typealias __Kotlin = self_mobile_kmp.__ConversationType
    public typealias __Enum = self_mobile_kmp.ConversationType
  }
  public enum DevMode {
    public typealias __Kotlin = self_mobile_kmp.__DevMode
    public typealias __Enum = self_mobile_kmp.DevMode
  }
  public enum DocumentType {
    public typealias __Kotlin = self_mobile_kmp.DocumentType
  }
  public enum Environment {
    public typealias __Kotlin = self_mobile_kmp.__Environment
    public typealias __Enum = self_mobile_kmp.Environment
  }
  public enum Logger {
    public typealias __Kotlin = self_mobile_kmp.Logger
  }
  public enum MessageFrom {
    public typealias __Kotlin = self_mobile_kmp.MessageFrom
  }
  public enum MessageStatus {
    public typealias __Kotlin = self_mobile_kmp.__MessageStatus
    public typealias __Enum = self_mobile_kmp.MessageStatus
  }
  public enum MimeType {
    public typealias __Kotlin = self_mobile_kmp.MimeType
  }
  public enum PlatformName {
    public typealias __Kotlin = self_mobile_kmp.__PlatformName
    public typealias __Enum = self_mobile_kmp.PlatformName
  }
  public enum StatusEnum {
    public typealias __Kotlin = self_mobile_kmp.__StatusEnum
    public typealias __Enum = self_mobile_kmp.StatusEnum
  }
  public enum TimeUtils {
    public typealias __Kotlin = self_mobile_kmp.TimeUtils
  }
  public enum Utils {
    public typealias __Kotlin = self_mobile_kmp.Utils
  }
  public enum Errors {
    public typealias __Kotlin = self_mobile_kmp.Errors
  }
  public enum SelfException {
    public typealias __Kotlin = self_mobile_kmp.SelfException
  }
  public enum Action {
    public typealias __Kotlin = self_mobile_kmp.Action
  }
  public enum EncryptionManager {
    public typealias __Kotlin = self_mobile_kmp.EncryptionManager
  }
  public enum Key {
    public typealias __Kotlin = self_mobile_kmp.Key
  }
  public enum MessagingManager {
    public typealias __Kotlin = self_mobile_kmp.MessagingManager
  }
  public enum Operation {
    public typealias __Kotlin = self_mobile_kmp.Operation
  }
  public enum PreferenceManager {
    public typealias __Kotlin = self_mobile_kmp.PreferenceManager
  }
  public enum SelfInteractor {
    public typealias __Kotlin = self_mobile_kmp.SelfInteractor
  }
  public enum SelfMessaging {
    public typealias __Kotlin = self_mobile_kmp.SelfMessaging
  }
  public enum SelfSdkKMP {
    public typealias __Kotlin = self_mobile_kmp.SelfSdkKMP
  }
  public enum SelfServiceApi {
    public typealias __Kotlin = self_mobile_kmp.SelfServiceApi
  }
  public enum SignatureGraph {
    public typealias __Kotlin = self_mobile_kmp.SignatureGraph
  }
  public enum SodiumManager {
    public typealias __Kotlin = self_mobile_kmp.SodiumManager
  }
  public enum Account {
    public typealias __Kotlin = self_mobile_kmp.Account
  }
  public enum Attachment {
    public typealias __Kotlin = self_mobile_kmp.Attachment
  }
  public enum DataObject {
    public typealias __Kotlin = self_mobile_kmp.DataObject
  }
  public enum Attestation {
    public typealias __Kotlin = self_mobile_kmp.Attestation
  }
  public enum Signable {
    public typealias __Kotlin = self_mobile_kmp.Signable
  }
  public enum AttestationRequest {
    public typealias __Kotlin = self_mobile_kmp.AttestationRequest
  }
  public enum Message {
    public typealias __Kotlin = self_mobile_kmp.Message
  }
  public enum AttestationResponse {
    public typealias __Kotlin = self_mobile_kmp.AttestationResponse
  }
  public enum ChatMessage {
    public typealias __Kotlin = self_mobile_kmp.ChatMessage
  }
  public enum Document {
    public typealias __Kotlin = self_mobile_kmp.Document
  }
  public enum Fact {
    public typealias __Kotlin = self_mobile_kmp.Fact
  }
  public enum ResponseStatus {
    public typealias __Kotlin = self_mobile_kmp.__ResponseStatus
    public typealias __Enum = self_mobile_kmp.ResponseStatus
  }
  public enum Signer {
    public typealias __Kotlin = self_mobile_kmp.Signer
  }
  public enum VerificationRequest {
    public typealias __Kotlin = self_mobile_kmp.VerificationRequest
  }
  public enum VerificationResponse {
    public typealias __Kotlin = self_mobile_kmp.VerificationResponse
  }
  public enum ACLCommand {
    public typealias __Kotlin = self_mobile_kmp.__ACLCommand
    public typealias __Enum = self_mobile_kmp.ACLCommand
  }
  public enum AccessControlList {
    public typealias __Kotlin = self_mobile_kmp.AccessControlList
  }
  public enum Auth {
    public typealias __Kotlin = self_mobile_kmp.Auth
  }
  public enum ErrType {
    public typealias __Kotlin = self_mobile_kmp.__ErrType
    public typealias __Enum = self_mobile_kmp.ErrType
  }
  public enum Header {
    public typealias __Kotlin = self_mobile_kmp.Header
  }
  public enum Message_ {
    public typealias __Kotlin = self_mobile_kmp.Message_
  }
  public enum MsgType {
    public typealias __Kotlin = self_mobile_kmp.__MsgType
    public typealias __Enum = self_mobile_kmp.MsgType
  }
  public enum Notification {
    public typealias __Kotlin = self_mobile_kmp.Notification
  }
  public enum Status {
    public typealias __Kotlin = self_mobile_kmp.Status
  }
  public enum Watch {
    public typealias __Kotlin = self_mobile_kmp.Watch
  }
  public enum SelfDao {
    public typealias __Kotlin = self_mobile_kmp.SelfDao
  }
  public enum AttachmentModel {
    public typealias __Kotlin = self_mobile_kmp.AttachmentModel
  }
  public enum ConversationModel {
    public typealias __Kotlin = self_mobile_kmp.ConversationModel
  }
  public enum EncryptedMessageModel {
    public typealias __Kotlin = self_mobile_kmp.EncryptedMessageModel
  }
  public enum FactAttributeModel {
    public typealias __Kotlin = self_mobile_kmp.FactAttributeModel
  }
  public enum FactModel {
    public typealias __Kotlin = self_mobile_kmp.FactModel
  }
  public enum FactQueryModel {
    public typealias __Kotlin = self_mobile_kmp.FactQueryModel
  }
  public enum FactRequestModel {
    public typealias __Kotlin = self_mobile_kmp.FactRequestModel
  }
  public enum MessageModel {
    public typealias __Kotlin = self_mobile_kmp.MessageModel
  }
  public enum SelfDataModel {
    public typealias __Kotlin = self_mobile_kmp.SelfDataModel
  }
  public enum SelfIdModel {
    public typealias __Kotlin = self_mobile_kmp.SelfIdModel
  }
  public enum SessionModel {
    public typealias __Kotlin = self_mobile_kmp.SessionModel
  }
  public enum VerificationModel {
    public typealias __Kotlin = self_mobile_kmp.VerificationModel
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Constants {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Constants.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.DocumentType {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.DocumentType.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Logger {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Logger.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.MessageFrom {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.MessageFrom.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.MimeType {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.MimeType.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.TimeUtils {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.TimeUtils.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Utils {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Utils.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Errors {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Errors.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.PreferenceManager {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.PreferenceManager.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.SelfInteractor {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.SelfInteractor.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.SelfSdkKMP {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.SelfSdkKMP.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.SodiumManager {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.SodiumManager.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Account {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.Account.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Attachment {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.Attachment.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Attestation {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.Attestation.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.AttestationRequest {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.AttestationRequest.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.AttestationResponse {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.AttestationResponse.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.ChatMessage {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.ChatMessage.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.DataObject {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.DataObject.Builder
  }
  public enum Link {
    public typealias __Kotlin = self_mobile_kmp.DataObject.Link
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Document {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.Document.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Fact {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.Fact.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.VerificationRequest {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.VerificationRequest.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.VerificationResponse {
  public enum Builder {
    public typealias __Kotlin = self_mobile_kmp.VerificationResponse.Builder
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.ACLCommand {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.__ACLCommand.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.AccessControlList {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.AccessControlList.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Auth {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Auth.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.ErrType {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.__ErrType.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Header {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Header.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Message_ {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Message_.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.MsgType {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.__MsgType.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Notification {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Notification.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Status {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Status.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.Watch {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.Watch.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.AttachmentModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.AttachmentModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.ConversationModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.ConversationModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.EncryptedMessageModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.EncryptedMessageModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.FactAttributeModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.FactAttributeModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.FactModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.FactModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.FactQueryModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.FactQueryModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.FactRequestModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.FactRequestModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.MessageModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.MessageModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.SelfDataModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.SelfDataModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.SelfIdModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.SelfIdModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.SessionModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.SessionModel.Companion
  }
}
extension self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.VerificationModel {
  public enum Companion {
    public typealias __Kotlin = self_mobile_kmp.VerificationModel.Companion
  }
}
@frozen public enum Environment : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case review
  case staging
  case sandbox
  case production
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__Environment, result: inout self_mobile_kmp.Environment?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Environment, result: inout self_mobile_kmp.Environment?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Environment?) -> self_mobile_kmp.Environment
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__Environment
  public static func fromObjectiveC(_ source: self_mobile_kmp.__Environment?) -> self_mobile_kmp.Environment
  public typealias _ObjectiveCType = self_mobile_kmp.__Environment
  public static func == (a: self_mobile_kmp.Environment, b: self_mobile_kmp.Environment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.Environment]
  public static var allCases: [self_mobile_kmp.Environment] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.Environment {
  public func toKotlinEnum() -> self_mobile_kmp.__Environment
}
extension self_mobile_kmp.__Environment {
  public func toSwiftEnum() -> self_mobile_kmp.Environment
}
extension self_mobile_kmp.SelfInteractor {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func createSelfAccount(selfId: Swift.String, selfieBase64: Swift.String) async throws -> Swift.String?
  #endif
}
extension self_mobile_kmp.SelfInteractor {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func createSelfAccount(pushToken: Swift.String?, idToken: Swift.String?, voipToken: Swift.String?, keyId: Swift.String?, challenge: Swift.String?, appattest: Swift.String?) async throws -> Swift.String?
  #endif
}
extension self_mobile_kmp.SelfInteractor {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAccount() async throws
  #endif
}
extension self_mobile_kmp.SelfInteractor {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func downloadObject(link: Swift.String, sharedKey: Swift.String) async throws -> self_mobile_kmp.Skie.Stdlib.ByteArray.__Kotlin
  #endif
}
extension self_mobile_kmp.SelfInteractor {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func sendChatMessage(chatMsg: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.ChatMessage.__Kotlin) async throws
  #endif
}
extension self_mobile_kmp.SelfInteractor {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func sendDocumentVerification(deviceAttestation: [Swift.String : Swift.String], verificationRequest: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.VerificationRequest.__Kotlin) async throws
  #endif
}
extension self_mobile_kmp.SelfInteractor {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func uploadObject(byteArray: self_mobile_kmp.Skie.Stdlib.ByteArray.__Kotlin) async throws -> self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.DataObject.Link.__Kotlin?
  #endif
}
extension self_mobile_kmp.SelfInteractor {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func sendFactRequest(attestationRequest: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.AttestationRequest.__Kotlin) async throws
  #endif
}
extension self_mobile_kmp.SelfInteractor {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func sendFactResponse(attestationResponse: self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.AttestationResponse.__Kotlin) async throws
  #endif
}
@frozen public enum ResponseStatus : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case none
  case pending
  case accepted
  case rejected
  case verified
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__ResponseStatus, result: inout self_mobile_kmp.ResponseStatus?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__ResponseStatus, result: inout self_mobile_kmp.ResponseStatus?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__ResponseStatus?) -> self_mobile_kmp.ResponseStatus
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__ResponseStatus
  public static func fromObjectiveC(_ source: self_mobile_kmp.__ResponseStatus?) -> self_mobile_kmp.ResponseStatus
  public typealias _ObjectiveCType = self_mobile_kmp.__ResponseStatus
  public static func == (a: self_mobile_kmp.ResponseStatus, b: self_mobile_kmp.ResponseStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.ResponseStatus]
  public static var allCases: [self_mobile_kmp.ResponseStatus] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.ResponseStatus {
  public func toKotlinEnum() -> self_mobile_kmp.__ResponseStatus
}
extension self_mobile_kmp.__ResponseStatus {
  public func toSwiftEnum() -> self_mobile_kmp.ResponseStatus
}
@frozen public enum ErrType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case errconnection
  case errbadrequest
  case errinternal
  case errmessage
  case errauth
  case erracl
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: self_mobile_kmp.__ErrType.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__ErrType, result: inout self_mobile_kmp.ErrType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__ErrType, result: inout self_mobile_kmp.ErrType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__ErrType?) -> self_mobile_kmp.ErrType
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__ErrType
  public static func fromObjectiveC(_ source: self_mobile_kmp.__ErrType?) -> self_mobile_kmp.ErrType
  public typealias Companion = self_mobile_kmp.__ErrType.Companion
  public typealias _ObjectiveCType = self_mobile_kmp.__ErrType
  public static func == (a: self_mobile_kmp.ErrType, b: self_mobile_kmp.ErrType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.ErrType]
  public static var allCases: [self_mobile_kmp.ErrType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.ErrType {
  public func toKotlinEnum() -> self_mobile_kmp.__ErrType
}
extension self_mobile_kmp.__ErrType {
  public func toSwiftEnum() -> self_mobile_kmp.ErrType
}
@frozen public enum MsgType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case msg
  case ack
  case err
  case auth
  case acl
  case wtc
  case sts
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: self_mobile_kmp.__MsgType.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__MsgType, result: inout self_mobile_kmp.MsgType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__MsgType, result: inout self_mobile_kmp.MsgType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__MsgType?) -> self_mobile_kmp.MsgType
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__MsgType
  public static func fromObjectiveC(_ source: self_mobile_kmp.__MsgType?) -> self_mobile_kmp.MsgType
  public typealias Companion = self_mobile_kmp.__MsgType.Companion
  public typealias _ObjectiveCType = self_mobile_kmp.__MsgType
  public static func == (a: self_mobile_kmp.MsgType, b: self_mobile_kmp.MsgType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.MsgType]
  public static var allCases: [self_mobile_kmp.MsgType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.MsgType {
  public func toKotlinEnum() -> self_mobile_kmp.__MsgType
}
extension self_mobile_kmp.__MsgType {
  public func toSwiftEnum() -> self_mobile_kmp.MsgType
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func deleteAccount(selfId: Swift.String) async throws -> self_mobile_kmp.KotlinBoolean
  #endif
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func downloadObject(link: Swift.String) async throws -> self_mobile_kmp.Skie.Stdlib.ByteArray.__Kotlin
  #endif
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getDevices(selfId: Swift.String, force: Swift.Bool) async throws -> [Swift.String]
  #endif
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getIdentityHistory(selfId: Swift.String) async throws -> self_mobile_kmp.Skie.com_joinself__self_mobile_kmp.SignatureGraph.__Kotlin
  #endif
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func getPrekeys(selfId: Swift.String, deviceId: Swift.String, messageToken: Swift.String?) async throws -> Swift.String
  #endif
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func registerNewDevice(history: self_mobile_kmp.Skie.KotlinxSerializationJson.JsonElement.__Kotlin, selfId: Swift.String) async throws -> self_mobile_kmp.KotlinBoolean
  #endif
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func registerSelfId(history: self_mobile_kmp.Skie.KotlinxSerializationJson.JsonElement.__Kotlin?, platform: Swift.String, deviceId: Swift.String?, pushToken: Swift.String?, idToken: Swift.String?, voipToken: Swift.String?, keyId: Swift.String?, challenge: Swift.String?, appattest: Swift.String?) async throws -> Swift.String?
  #endif
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func submitPrekeys(selfId: Swift.String, deviceId: Swift.String, keys: [self_mobile_kmp.Skie.KotlinxSerializationJson.JsonElement.__Kotlin]) async throws -> Swift.String
  #endif
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func updateNewDevice(selfId: Swift.String, deviceId: Swift.String, uuid: Swift.String, kid: Swift.String) async throws -> self_mobile_kmp.KotlinBoolean
  #endif
}
extension self_mobile_kmp.SelfServiceApi {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func uploadObject(byteArray: self_mobile_kmp.Skie.Stdlib.ByteArray.__Kotlin) async throws -> self_mobile_kmp.KotlinPair<Foundation.NSString, self_mobile_kmp.KotlinLong>?
  #endif
}
@frozen public enum MessageStatus : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case pending
  case sent
  case delivered
  case read
  case error
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__MessageStatus, result: inout self_mobile_kmp.MessageStatus?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__MessageStatus, result: inout self_mobile_kmp.MessageStatus?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__MessageStatus?) -> self_mobile_kmp.MessageStatus
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__MessageStatus
  public static func fromObjectiveC(_ source: self_mobile_kmp.__MessageStatus?) -> self_mobile_kmp.MessageStatus
  public typealias _ObjectiveCType = self_mobile_kmp.__MessageStatus
  public static func == (a: self_mobile_kmp.MessageStatus, b: self_mobile_kmp.MessageStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.MessageStatus]
  public static var allCases: [self_mobile_kmp.MessageStatus] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.MessageStatus {
  public func toKotlinEnum() -> self_mobile_kmp.__MessageStatus
}
extension self_mobile_kmp.__MessageStatus {
  public func toSwiftEnum() -> self_mobile_kmp.MessageStatus
}
extension self_mobile_kmp.Kotlinx_coroutines_coreFlowCollector {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
  #endif
}
extension self_mobile_kmp.Kotlinx_coroutines_coreFlow {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any self_mobile_kmp.Kotlinx_coroutines_coreFlowCollector) async throws
  #endif
}
extension self_mobile_kmp.Skie.KotlinxCoroutinesCore {
  public enum Flow {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_coroutines_coreFlow
  }
  public enum MutableSharedFlow {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_coroutines_coreMutableSharedFlow
  }
  public enum SharedFlow {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_coroutines_coreSharedFlow
  }
  public enum FlowCollector {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_coroutines_coreFlowCollector
  }
  public enum MutableStateFlow {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_coroutines_coreMutableStateFlow
  }
  public enum StateFlow {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_coroutines_coreStateFlow
  }
  public enum Runnable {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_coroutines_coreRunnable
  }
}
extension self_mobile_kmp.Skie.KotlinxSerializationCore {
  public enum PolymorphicKind {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePolymorphicKind
    @frozen public enum __Sealed : Swift.Hashable {
      case oPEN(self_mobile_kmp.Skie.KotlinxSerializationCore.PolymorphicKind.OPEN.__Kotlin)
      case sEALED(self_mobile_kmp.Skie.KotlinxSerializationCore.PolymorphicKind.SEALED.__Kotlin)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed, b: self_mobile_kmp.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum SerialKind {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreSerialKind
    @frozen public enum __Sealed : Swift.Hashable {
      case polymorphicKind(self_mobile_kmp.Skie.KotlinxSerializationCore.PolymorphicKind.__Kotlin)
      case primitiveKind(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.__Kotlin)
      case cONTEXTUAL(self_mobile_kmp.Skie.KotlinxSerializationCore.SerialKind.CONTEXTUAL.__Kotlin)
      case eNUM(self_mobile_kmp.Skie.KotlinxSerializationCore.SerialKind.ENUM.__Kotlin)
      case structureKind(self_mobile_kmp.Skie.KotlinxSerializationCore.StructureKind.__Kotlin)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.KotlinxSerializationCore.SerialKind.__Sealed, b: self_mobile_kmp.Skie.KotlinxSerializationCore.SerialKind.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum PrimitiveKind {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind
    @frozen public enum __Sealed : Swift.Hashable {
      case bOOLEAN(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.BOOLEAN.__Kotlin)
      case bYTE(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.BYTE.__Kotlin)
      case cHAR(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.CHAR.__Kotlin)
      case dOUBLE(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.DOUBLE.__Kotlin)
      case fLOAT(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.FLOAT.__Kotlin)
      case iNT(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.INT.__Kotlin)
      case lONG(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.LONG.__Kotlin)
      case sHORT(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.SHORT.__Kotlin)
      case sTRING(self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.STRING.__Kotlin)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed, b: self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum StructureKind {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreStructureKind
    @frozen public enum __Sealed : Swift.Hashable {
      case cLASS(self_mobile_kmp.Skie.KotlinxSerializationCore.StructureKind.CLASS.__Kotlin)
      case lIST(self_mobile_kmp.Skie.KotlinxSerializationCore.StructureKind.LIST.__Kotlin)
      case mAP(self_mobile_kmp.Skie.KotlinxSerializationCore.StructureKind.MAP.__Kotlin)
      case oBJECT(self_mobile_kmp.Skie.KotlinxSerializationCore.StructureKind.OBJECT.__Kotlin)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.KotlinxSerializationCore.StructureKind.__Sealed, b: self_mobile_kmp.Skie.KotlinxSerializationCore.StructureKind.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum KSerializer {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreKSerializer
  }
  public enum SerializationStrategy {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreSerializationStrategy
  }
  public enum DeserializationStrategy {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreDeserializationStrategy
  }
  public enum Encoder {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreEncoder
  }
  public enum SerialDescriptor {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreSerialDescriptor
  }
  public enum Decoder {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreDecoder
  }
  public enum CompositeEncoder {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreCompositeEncoder
  }
  public enum SerializersModule {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreSerializersModule
    @frozen public enum __Sealed : Swift.Hashable {
      case `else`
      public static func == (a: self_mobile_kmp.Skie.KotlinxSerializationCore.SerializersModule.__Sealed, b: self_mobile_kmp.Skie.KotlinxSerializationCore.SerializersModule.__Sealed) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum CompositeDecoder {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreCompositeDecoder
  }
  public enum SerializersModuleCollector {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreSerializersModuleCollector
  }
}
extension self_mobile_kmp.Skie.KotlinxSerializationCore.SerialKind {
  public enum CONTEXTUAL {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreSerialKind.CONTEXTUAL
  }
  public enum ENUM {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreSerialKind.ENUM
  }
}
extension self_mobile_kmp.Skie.KotlinxSerializationCore.PolymorphicKind {
  public enum OPEN {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePolymorphicKind.OPEN
  }
  public enum SEALED {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePolymorphicKind.SEALED
  }
}
extension self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind {
  public enum BOOLEAN {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind.BOOLEAN
  }
  public enum BYTE {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind.BYTE
  }
  public enum CHAR {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind.CHAR
  }
  public enum DOUBLE {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind.DOUBLE
  }
  public enum FLOAT {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind.FLOAT
  }
  public enum INT {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind.INT
  }
  public enum LONG {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind.LONG
  }
  public enum SHORT {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind.SHORT
  }
  public enum STRING {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind.STRING
  }
}
extension self_mobile_kmp.Skie.KotlinxSerializationCore.StructureKind {
  public enum CLASS {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreStructureKind.CLASS
  }
  public enum LIST {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreStructureKind.LIST
  }
  public enum MAP {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreStructureKind.MAP
  }
  public enum OBJECT {
    public typealias __Kotlin = self_mobile_kmp.Kotlinx_serialization_coreStructureKind.OBJECT
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.KotlinxSerializationCore.StructureKind.__Sealed where __Sealed : self_mobile_kmp.Kotlinx_serialization_coreStructureKind
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.KotlinxSerializationCore.SerialKind.__Sealed where __Sealed : self_mobile_kmp.Kotlinx_serialization_coreSerialKind
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed where __Sealed : self_mobile_kmp.Kotlinx_serialization_corePolymorphicKind
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.KotlinxSerializationCore.SerializersModule.__Sealed where __Sealed : self_mobile_kmp.Kotlinx_serialization_coreSerializersModule
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed where __Sealed : self_mobile_kmp.Kotlinx_serialization_corePrimitiveKind
extension self_mobile_kmp.Skie.LibraryBase {
  public enum RealmObject {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmObject
  }
  public enum TypedRealmObject {
    public typealias __Kotlin = self_mobile_kmp.Library_baseTypedRealmObject
  }
  public enum BaseRealmObject {
    public typealias __Kotlin = self_mobile_kmp.Library_baseBaseRealmObject
  }
  public enum Deleteable {
    public typealias __Kotlin = self_mobile_kmp.Library_baseDeleteable
  }
  public enum Realm {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealm
  }
  public enum TypedRealm {
    public typealias __Kotlin = self_mobile_kmp.Library_baseTypedRealm
  }
  public enum BaseRealm {
    public typealias __Kotlin = self_mobile_kmp.Library_baseBaseRealm
  }
  public enum Versioned {
    public typealias __Kotlin = self_mobile_kmp.Library_baseVersioned
  }
  public enum RealmInstant {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmInstant
  }
  public enum MutableRealm {
    public typealias __Kotlin = self_mobile_kmp.Library_baseMutableRealm
  }
  public enum RealmChange {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmChange
    @frozen public enum __Sealed {
      case initialRealm(any self_mobile_kmp.Library_baseInitialRealm)
      case updatedRealm(any self_mobile_kmp.Library_baseUpdatedRealm)
    }
  }
  public enum ResultsChange {
    public typealias __Kotlin = self_mobile_kmp.Library_baseResultsChange
    @frozen public enum __Sealed {
      case initialResults(any self_mobile_kmp.Library_baseInitialResults)
      case updatedResults(any self_mobile_kmp.Library_baseUpdatedResults)
    }
  }
  public enum SingleQueryChange {
    public typealias __Kotlin = self_mobile_kmp.Library_baseSingleQueryChange
    @frozen public enum __Sealed {
      case objectChange(any self_mobile_kmp.Library_baseObjectChange)
      case pendingObject(any self_mobile_kmp.Library_basePendingObject)
    }
  }
  public enum ListPropertyType {
    public typealias __Kotlin = self_mobile_kmp.Library_baseListPropertyType
  }
  public enum RealmPropertyType {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmPropertyType
    @frozen public enum __Sealed : Swift.Hashable {
      case listPropertyType(self_mobile_kmp.Skie.LibraryBase.ListPropertyType.__Kotlin)
      case mapPropertyType(self_mobile_kmp.Skie.LibraryBase.MapPropertyType.__Kotlin)
      case setPropertyType(self_mobile_kmp.Skie.LibraryBase.SetPropertyType.__Kotlin)
      case valuePropertyType(self_mobile_kmp.Skie.LibraryBase.ValuePropertyType.__Kotlin)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: self_mobile_kmp.Skie.LibraryBase.RealmPropertyType.__Sealed, b: self_mobile_kmp.Skie.LibraryBase.RealmPropertyType.__Sealed) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum MapPropertyType {
    public typealias __Kotlin = self_mobile_kmp.Library_baseMapPropertyType
  }
  public enum SetPropertyType {
    public typealias __Kotlin = self_mobile_kmp.Library_baseSetPropertyType
  }
  public enum ValuePropertyType {
    public typealias __Kotlin = self_mobile_kmp.Library_baseValuePropertyType
  }
  public enum InitialRealm {
    public typealias __Kotlin = self_mobile_kmp.Library_baseInitialRealm
  }
  public enum UpdatedRealm {
    public typealias __Kotlin = self_mobile_kmp.Library_baseUpdatedRealm
  }
  public enum InitialResults {
    public typealias __Kotlin = self_mobile_kmp.Library_baseInitialResults
  }
  public enum UpdatedResults {
    public typealias __Kotlin = self_mobile_kmp.Library_baseUpdatedResults
  }
  public enum ListChangeSet {
    public typealias __Kotlin = self_mobile_kmp.Library_baseListChangeSet
  }
  public enum ObjectChange {
    public typealias __Kotlin = self_mobile_kmp.Library_baseObjectChange
    @frozen public enum __Sealed {
      case deletedObject(any self_mobile_kmp.Library_baseDeletedObject)
      case initialObject(any self_mobile_kmp.Library_baseInitialObject)
      case updatedObject(any self_mobile_kmp.Library_baseUpdatedObject)
    }
  }
  public enum PendingObject {
    public typealias __Kotlin = self_mobile_kmp.Library_basePendingObject
  }
  public enum DeletedObject {
    public typealias __Kotlin = self_mobile_kmp.Library_baseDeletedObject
  }
  public enum InitialObject {
    public typealias __Kotlin = self_mobile_kmp.Library_baseInitialObject
  }
  public enum UpdatedObject {
    public typealias __Kotlin = self_mobile_kmp.Library_baseUpdatedObject
  }
  public enum Configuration {
    public typealias __Kotlin = self_mobile_kmp.Library_baseConfiguration
  }
  public enum RealmQuery {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmQuery
  }
  public enum RealmElementQuery {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmElementQuery
  }
  public enum RealmSchema {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmSchema
  }
  public enum VersionId {
    public typealias __Kotlin = self_mobile_kmp.Library_baseVersionId
  }
  public enum UpdatePolicy {
    public typealias __Kotlin = self_mobile_kmp.__Library_baseUpdatePolicy
    public typealias __Enum = self_mobile_kmp.Library_baseUpdatePolicy
  }
  public enum RealmStorageType {
    public typealias __Kotlin = self_mobile_kmp.__Library_baseRealmStorageType
    public typealias __Enum = self_mobile_kmp.Library_baseRealmStorageType
  }
  public enum CompactOnLaunchCallback {
    public typealias __Kotlin = self_mobile_kmp.Library_baseCompactOnLaunchCallback
  }
  public enum InitialDataCallback {
    public typealias __Kotlin = self_mobile_kmp.Library_baseInitialDataCallback
  }
  public enum InitialRealmFileConfiguration {
    public typealias __Kotlin = self_mobile_kmp.Library_baseInitialRealmFileConfiguration
  }
  public enum LogConfiguration {
    public typealias __Kotlin = self_mobile_kmp.Library_baseLogConfiguration
  }
  public enum RealmScalarQuery {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmScalarQuery
  }
  public enum RealmSingleQuery {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmSingleQuery
  }
  public enum RealmScalarNullableQuery {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmScalarNullableQuery
  }
  public enum Sort {
    public typealias __Kotlin = self_mobile_kmp.__Library_baseSort
    public typealias __Enum = self_mobile_kmp.Library_baseSort
  }
  public enum RealmClass {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmClass
  }
  public enum LogLevel {
    public typealias __Kotlin = self_mobile_kmp.__Library_baseLogLevel
    public typealias __Enum = self_mobile_kmp.Library_baseLogLevel
  }
  public enum RealmLogger {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmLogger
  }
  public enum RealmProperty {
    public typealias __Kotlin = self_mobile_kmp.Library_baseRealmProperty
  }
  public enum RealmClassKind {
    public typealias __Kotlin = self_mobile_kmp.__Library_baseRealmClassKind
    public typealias __Enum = self_mobile_kmp.Library_baseRealmClassKind
  }
}
extension self_mobile_kmp.Skie.LibraryBase.ListChangeSet {
  public enum Range {
    public typealias __Kotlin = self_mobile_kmp.Library_baseListChangeSetRange
  }
}
@frozen public enum Library_baseRealmStorageType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case bool_
  case int_
  case string
  case binary
  case object
  case float_
  case double_
  case decimal128
  case timestamp
  case objectId
  case uuid
  case any
  public var kClass: any self_mobile_kmp.KotlinKClass {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseRealmStorageType, result: inout self_mobile_kmp.Library_baseRealmStorageType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseRealmStorageType, result: inout self_mobile_kmp.Library_baseRealmStorageType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseRealmStorageType?) -> self_mobile_kmp.Library_baseRealmStorageType
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__Library_baseRealmStorageType
  public static func fromObjectiveC(_ source: self_mobile_kmp.__Library_baseRealmStorageType?) -> self_mobile_kmp.Library_baseRealmStorageType
  public typealias _ObjectiveCType = self_mobile_kmp.__Library_baseRealmStorageType
  public static func == (a: self_mobile_kmp.Library_baseRealmStorageType, b: self_mobile_kmp.Library_baseRealmStorageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.Library_baseRealmStorageType]
  public static var allCases: [self_mobile_kmp.Library_baseRealmStorageType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.Library_baseRealmStorageType {
  public func toKotlinEnum() -> self_mobile_kmp.__Library_baseRealmStorageType
}
extension self_mobile_kmp.__Library_baseRealmStorageType {
  public func toSwiftEnum() -> self_mobile_kmp.Library_baseRealmStorageType
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.LibraryBase.SingleQueryChange.__Sealed where __Sealed : self_mobile_kmp.Library_baseSingleQueryChange
@frozen public enum Library_baseUpdatePolicy : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case error
  case all
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseUpdatePolicy, result: inout self_mobile_kmp.Library_baseUpdatePolicy?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseUpdatePolicy, result: inout self_mobile_kmp.Library_baseUpdatePolicy?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseUpdatePolicy?) -> self_mobile_kmp.Library_baseUpdatePolicy
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__Library_baseUpdatePolicy
  public static func fromObjectiveC(_ source: self_mobile_kmp.__Library_baseUpdatePolicy?) -> self_mobile_kmp.Library_baseUpdatePolicy
  public typealias _ObjectiveCType = self_mobile_kmp.__Library_baseUpdatePolicy
  public static func == (a: self_mobile_kmp.Library_baseUpdatePolicy, b: self_mobile_kmp.Library_baseUpdatePolicy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.Library_baseUpdatePolicy]
  public static var allCases: [self_mobile_kmp.Library_baseUpdatePolicy] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.Library_baseUpdatePolicy {
  public func toKotlinEnum() -> self_mobile_kmp.__Library_baseUpdatePolicy
}
extension self_mobile_kmp.__Library_baseUpdatePolicy {
  public func toSwiftEnum() -> self_mobile_kmp.Library_baseUpdatePolicy
}
@frozen public enum Library_baseLogLevel : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case all
  case trace
  case debug
  case info
  case warn
  case error
  case wtf
  case none
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var priority: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseLogLevel, result: inout self_mobile_kmp.Library_baseLogLevel?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseLogLevel, result: inout self_mobile_kmp.Library_baseLogLevel?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseLogLevel?) -> self_mobile_kmp.Library_baseLogLevel
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__Library_baseLogLevel
  public static func fromObjectiveC(_ source: self_mobile_kmp.__Library_baseLogLevel?) -> self_mobile_kmp.Library_baseLogLevel
  public typealias _ObjectiveCType = self_mobile_kmp.__Library_baseLogLevel
  public static func == (a: self_mobile_kmp.Library_baseLogLevel, b: self_mobile_kmp.Library_baseLogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.Library_baseLogLevel]
  public static var allCases: [self_mobile_kmp.Library_baseLogLevel] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.Library_baseLogLevel {
  public func toKotlinEnum() -> self_mobile_kmp.__Library_baseLogLevel
}
extension self_mobile_kmp.__Library_baseLogLevel {
  public func toSwiftEnum() -> self_mobile_kmp.Library_baseLogLevel
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.LibraryBase.RealmChange.__Sealed where __Sealed : self_mobile_kmp.Library_baseRealmChange
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.LibraryBase.ResultsChange.__Sealed where __Sealed : self_mobile_kmp.Library_baseResultsChange
@frozen public enum Library_baseRealmClassKind : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case standard
  case embedded
  case asymmetric
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseRealmClassKind, result: inout self_mobile_kmp.Library_baseRealmClassKind?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseRealmClassKind, result: inout self_mobile_kmp.Library_baseRealmClassKind?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseRealmClassKind?) -> self_mobile_kmp.Library_baseRealmClassKind
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__Library_baseRealmClassKind
  public static func fromObjectiveC(_ source: self_mobile_kmp.__Library_baseRealmClassKind?) -> self_mobile_kmp.Library_baseRealmClassKind
  public typealias _ObjectiveCType = self_mobile_kmp.__Library_baseRealmClassKind
  public static func == (a: self_mobile_kmp.Library_baseRealmClassKind, b: self_mobile_kmp.Library_baseRealmClassKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.Library_baseRealmClassKind]
  public static var allCases: [self_mobile_kmp.Library_baseRealmClassKind] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.Library_baseRealmClassKind {
  public func toKotlinEnum() -> self_mobile_kmp.__Library_baseRealmClassKind
}
extension self_mobile_kmp.__Library_baseRealmClassKind {
  public func toSwiftEnum() -> self_mobile_kmp.Library_baseRealmClassKind
}
@frozen public enum Library_baseSort : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case ascending
  case descending
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseSort, result: inout self_mobile_kmp.Library_baseSort?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseSort, result: inout self_mobile_kmp.Library_baseSort?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: self_mobile_kmp.__Library_baseSort?) -> self_mobile_kmp.Library_baseSort
  public func _bridgeToObjectiveC() -> self_mobile_kmp.__Library_baseSort
  public static func fromObjectiveC(_ source: self_mobile_kmp.__Library_baseSort?) -> self_mobile_kmp.Library_baseSort
  public typealias _ObjectiveCType = self_mobile_kmp.__Library_baseSort
  public static func == (a: self_mobile_kmp.Library_baseSort, b: self_mobile_kmp.Library_baseSort) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [self_mobile_kmp.Library_baseSort]
  public static var allCases: [self_mobile_kmp.Library_baseSort] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension self_mobile_kmp.Library_baseSort {
  public func toKotlinEnum() -> self_mobile_kmp.__Library_baseSort
}
extension self_mobile_kmp.__Library_baseSort {
  public func toSwiftEnum() -> self_mobile_kmp.Library_baseSort
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.LibraryBase.ObjectChange.__Sealed where __Sealed : self_mobile_kmp.Library_baseObjectChange
public func onEnum<__Sealed>(of sealed: __Sealed) -> self_mobile_kmp.Skie.LibraryBase.RealmPropertyType.__Sealed where __Sealed : self_mobile_kmp.Library_baseRealmPropertyType
extension self_mobile_kmp.Library_baseRealm {
  #if compiler(>=5.3) && $AsyncAwait
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func write(block: @escaping (any self_mobile_kmp.Library_baseMutableRealm) -> Any?) async throws -> Any?
  #endif
}
extension self_mobile_kmp.Wire_runtimeFieldEncoding : Swift.Sendable {}
extension self_mobile_kmp.Wire_runtimeSyntax : Swift.Sendable {}
extension self_mobile_kmp.StatusEnum : Swift.Sendable {}
extension self_mobile_kmp.ConversationType : Swift.Sendable {}
extension self_mobile_kmp.PlatformName : Swift.Sendable {}
extension self_mobile_kmp.ACLCommand : Swift.Sendable {}
extension self_mobile_kmp.DevMode : Swift.Sendable {}
extension self_mobile_kmp.Environment : Swift.Sendable {}
extension self_mobile_kmp.ResponseStatus : Swift.Sendable {}
extension self_mobile_kmp.ErrType : Swift.Sendable {}
extension self_mobile_kmp.MsgType : Swift.Sendable {}
extension self_mobile_kmp.MessageStatus : Swift.Sendable {}
extension self_mobile_kmp.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.Sendable {}
extension self_mobile_kmp.Library_baseRealmStorageType : Swift.Sendable {}
extension self_mobile_kmp.Library_baseUpdatePolicy : Swift.Sendable {}
extension self_mobile_kmp.Library_baseLogLevel : Swift.Sendable {}
extension self_mobile_kmp.Library_baseRealmClassKind : Swift.Sendable {}
extension self_mobile_kmp.Library_baseSort : Swift.Sendable {}
